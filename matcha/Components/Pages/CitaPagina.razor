@page "/citas"
@using matcha.Modelo
@inject matcha.Components.Services.CitasController CitasController

<PageTitle>Agendar Cita</PageTitle>

<div class="container-form shadow-sm p-4 rounded bg-white">
    <h3 class="mb-4">
        <span class="fas fa-calendar-check text-success me-2"></span>
        Agendar Cita
    </h3>

    <EditForm Model="@cita" OnValidSubmit="ConfirmarCita">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-6">

                <!-- Paciente -->
                <div class="mb-3">
                    <label>Paciente</label>
                    <InputSelect TValue="int" class="form-select" @bind-Value="cita.PacienteID">
                        <option value="">-- Selecciona paciente --</option>
                        @foreach (var paciente in Pacientes)
                        {
                            <option value="@paciente.PacienteID">@paciente.Nombre</option>
                        }
                    </InputSelect>
                </div>

                <!-- Psicólogo -->
                <div class="mb-3">
                    <label>Psicólogo</label>
                    <InputSelect TValue="int" class="form-select" @bind-Value="cita.EmpleadoID" @onchange="OnEmpleadoChanged">
                        <option value="">-- Selecciona psicólogo --</option>
                        @foreach (var emp in Empleados)
                        {
                            <option value="@emp.EmpleadoID">@emp.UserName (@emp.RolNombre)</option>
                        }
                    </InputSelect>
                </div>

                <!-- Motivo -->
                <div class="mb-3">
                    <label>Motivo de la cita</label>
                    <InputTextArea class="form-control" @bind-Value="cita.Motivo" />
                </div>

                <!-- Fecha -->
                <div class="mb-3">
                    <label>Fecha</label>
                    <InputDate TValue="DateTime" class="form-control" @bind-Value="cita.Fecha" />
                </div>

                <!-- Hora -->
                <div class="mb-3">
                    <label>Hora disponible</label>
                    <InputSelect class="form-select" @bind-Value="cita.Hora">
                        <option value="">-- Selecciona hora --</option>
                        @foreach (var hora in HorasDisponibles)
                        {
                            <option value="@hora">@hora</option>
                        }
                    </InputSelect>
                </div>

                <button class="btn btn-success w-100 mt-3" type="submit">
                    Confirmar cita
                </button>
            </div>

            <!-- Calendario -->
            <div class="col-md-6">
                <div class="calendar p-3 border rounded mb-3">
                    <h5>@currentMonth.ToString("MMMM yyyy")</h5>
                    <div class="d-flex justify-content-between mb-2">
                        <button class="btn btn-sm btn-outline-secondary" @onclick="PrevMonth">«</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="NextMonth">»</button>
                    </div>
                    <div class="calendar-grid">
                        @foreach (var day in CalendarDays)
                        {
                            var tieneCita = CitasEmpleado.Any(c => c.Fecha.Date == day?.Date);
                            <div class="calendar-day @(day.HasValue ? "active" : "empty") @(tieneCita ? "has-cita" : "")">
                                @if (day.HasValue)
                                {
                                    <span>@day.Value.Day</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

<style>
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 4px;
    }

    .calendar-day {
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 6px;
    }

        .calendar-day.active {
            background: #f8f9fa;
            cursor: pointer;
        }

            .calendar-day.active:hover {
                background: #d4edda;
            }

        .calendar-day.empty {
            background: transparent;
        }

    .has-cita {
        background: #28a745 !important;
        color: white;
    }
</style>

@code {
    private Cita cita = new();

    private List<Usuario> Pacientes = new();
    private List<Empleado> Empleados = new();
    private List<Cita> CitasEmpleado = new();

    private List<string> HorasDisponibles = new() { "10:00", "11:00", "12:00", "16:00", "17:00" };

    private DateTime currentMonth = DateTime.Today;
    private List<DateTime?> CalendarDays = new();

    protected override async Task OnInitializedAsync()
    {
        Pacientes = await CitasController.GetPacientesAsync();
        Empleados = await CitasController.GetEmpleadosAsync();
        GenerarCalendario(currentMonth);
    }

    private async Task OnEmpleadoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var empId))
        {
            CitasEmpleado = await CitasController.GetCitasPorEmpleadoAsync(empId);
        }
        else
        {
            CitasEmpleado.Clear();
        }

        StateHasChanged();
    }

    private void PrevMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        GenerarCalendario(currentMonth);
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        GenerarCalendario(currentMonth);
    }

    private void GenerarCalendario(DateTime mes)
    {
        CalendarDays.Clear();
        var firstDay = new DateTime(mes.Year, mes.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(mes.Year, mes.Month);

        int offset = (int)firstDay.DayOfWeek;
        for (int i = 0; i < offset; i++) CalendarDays.Add(null);

        for (int d = 1; d <= daysInMonth; d++)
            CalendarDays.Add(new DateTime(mes.Year, mes.Month, d));
    }

    private async Task ConfirmarCita()
    {
        await CitasController.InsertarCitaAsync(cita);
        Console.WriteLine("✅ Cita guardada correctamente");

        if (cita.EmpleadoID > 0)
        {
            CitasEmpleado = await CitasController.GetCitasPorEmpleadoAsync(cita.EmpleadoID);
        }
    }
}
