@page "/citas"
@using matcha.Modelo
@using Microsoft.AspNetCore.Components.Forms
@inject matcha.Components.Services.CitasController CitasController

<PageTitle>Agendar Cita</PageTitle>

<div class="container-form shadow-sm p-4 rounded bg-white">
    <h3 class="mb-4">
        <span class="fas fa-calendar-check text-success me-2"></span>
        Agendar Cita
    </h3>

    <EditForm Model="@cita" OnValidSubmit="ConfirmarCita" FormName="CitaForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row">
            <div class="col-md-6">

                <!-- Psicólogo -->
                <div class="mb-3">
                    <label>Psicólogo</label>
                    <!-- Patrón estable: Value/ValueChanged (sin @bind ni @onchange) -->
                    <InputSelect TValue="int"
                                 class="form-select"
                                 Value="cita.EmpleadoID"
                                 ValueChanged="OnEmpleadoChanged"
                                 ValueExpression="@(() => cita.EmpleadoID)">
                        <option value="0">-- Selecciona psicólogo --</option>
                        @foreach (var emp in Empleados)
                        {
                            <option value="@emp.EmpleadoID">@emp.UserName (@emp.RolNombre)</option>
                        }
                    </InputSelect>
                </div>

                <!-- Paciente (filtrado por psicólogo; incluye no asignados) -->
                <div class="mb-3">
                    <label>Paciente</label>
                    <InputSelect @key="cita.EmpleadoID"
                                 TValue="int"
                                 class="form-select"
                                 @bind-Value="cita.PacienteID"
                                 disabled="@( !PacientesHabilitados )">
                        <option value="0">-- Selecciona paciente --</option>
                        @foreach (var paciente in Pacientes)
                        {
                            var noAsignado = paciente.EmpleadoID is null;
                            <option value="@paciente.PacienteID">
                                @paciente.Nombre @(noAsignado ? " — (no asignado)" : "")
                            </option>
                        }
                    </InputSelect>
                </div>

                <!-- Motivo -->
                <div class="mb-3">
                    <label>Motivo de la cita</label>
                    <InputTextArea class="form-control" @bind-Value="cita.Motivo" />
                </div>

                <!-- Fecha -->
                <div class="mb-3">
                    <label>Fecha</label>
                    <InputDate TValue="DateTime"
                               class="form-control"
                               @bind-Value="cita.Fecha"
                               @onchange="OnFechaChanged" />
                </div>

                <!-- Hora -->
                <div class="mb-3">
                    <label>Hora disponible</label>
                    <InputSelect class="form-select"
                                 @bind-Value="cita.Hora"
                                 disabled="@(cita.EmpleadoID <= 0)">
                        <option value="">-- Selecciona hora --</option>
                        @foreach (var hora in HorasDisponibles)
                        {
                            <option value="@hora">@hora</option>
                        }
                    </InputSelect>
                </div>

                <button class="btn btn-success w-100 mt-3" type="submit"
                        disabled="@(cita.EmpleadoID <= 0 || cita.PacienteID == 0 || string.IsNullOrWhiteSpace(cita.Hora))">
                    Confirmar cita
                </button>

                @* DEBUG rápido (opcional):
                <small class="text-muted d-block mt-2">
                    EmpleadoID: @cita.EmpleadoID · Pacientes: @Pacientes.Count · Cargando: @cargandoPacientes
                </small>*@
            </div>

            <!-- Calendario -->
            <div class="col-md-6">
                <div class="calendar p-3 border rounded mb-3">
                    <h5 class="text-capitalize">@currentMonth.ToString("MMMM yyyy")</h5>
                    <div class="d-flex justify-content-between mb-2">
                        <button class="btn btn-sm btn-outline-secondary" @onclick="PrevMonth">«</button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="NextMonth">»</button>
                    </div>
                    <div class="calendar-grid">
                        @foreach (var day in CalendarDays)
                        {
                            var esHoy = day.HasValue && day.Value.Date == DateTime.Today.Date;
                            var esSeleccionado = day.HasValue && day.Value.Date == cita.Fecha.Date;
                            var tieneCita = day.HasValue && CitasEmpleado.Any(c => c.Fecha.Date == day.Value.Date);

                            <div class="calendar-day @(day.HasValue ? "active" : "empty") @(tieneCita ? "has-cita" : "") @(esSeleccionado ? "selected" : "") @(esHoy ? "today" : "")"
                                 @onclick="@(day.HasValue ? (() => SeleccionarDia(day.Value)) : null)">
                                @if (day.HasValue)
                                {
                                    <span>@day.Value.Day</span>
                                }
                            </div>
                        }
                    </div>
                </div>
                <small class="text-muted">
                    <span class="badge bg-success me-1">&nbsp;</span> día con citas del psicólogo seleccionado
                </small>
            </div>
        </div>
    </EditForm>
</div>

<style>
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 4px;
    }

    .calendar-day {
        height: 40px;
        display: flex;
        justify-content: center;
        align-items: center;
        border-radius: 6px;
        user-select: none;
    }

        .calendar-day.active {
            background: #f8f9fa;
            cursor: pointer;
            transition: background .15s ease-in-out;
        }

            .calendar-day.active:hover {
                background: #d4edda;
            }

        .calendar-day.empty {
            background: transparent;
        }

        .calendar-day.selected {
            outline: 2px solid #198754;
            font-weight: 600;
        }

        .calendar-day.today span {
            text-decoration: underline;
        }

    .has-cita {
        background: #28a745 !important;
        color: white;
    }
</style>

@code {
    private Cita cita = new() { Fecha = DateTime.Today, Hora = "" };

    private List<Usuario> Pacientes = new();
    private List<Empleado> Empleados = new();
    private List<Cita> CitasEmpleado = new();

    private readonly List<string> TodasLasHoras = new() { "09:00", "10:00", "11:00", "12:00", "16:00", "17:00" };
    private List<string> HorasDisponibles = new();

    private DateTime currentMonth = DateTime.Today;
    private List<DateTime?> CalendarDays = new();

    private bool cargandoPacientes = false;
    private bool PacientesHabilitados => cita.EmpleadoID > 0 && !cargandoPacientes;

    protected override async Task OnInitializedAsync()
    {
        Empleados = await CitasController.GetEmpleadosAsync();
        Pacientes = await CitasController.GetPacientesAsync();
        GenerarCalendario(currentMonth);
        RecalcularHorasDisponibles();
    }

    // Cambio de psicólogo (handler tipado: int)
    private async Task OnEmpleadoChanged(int empId)
    {
        cargandoPacientes = true;
        cita.EmpleadoID = empId;

        if (empId > 0)
        {
            Pacientes = await CitasController.GetPacientesPorPsicologoAsync(empId);
            CitasEmpleado = await CitasController.GetCitasPorEmpleadoAsync(empId);

            // Reset dependientes
            cita.PacienteID = 0;
            cita.Hora = "";
        }
        else
        {
            Pacientes.Clear();
            CitasEmpleado.Clear();
            cita.PacienteID = 0;
            cita.Hora = "";
        }

        RecalcularHorasDisponibles();
        cargandoPacientes = false;
        StateHasChanged();
    }

    private Task OnFechaChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e?.Value?.ToString(), out var f))
        {
            cita.Fecha = f.Date;
            RecalcularHorasDisponibles();
        }
        return Task.CompletedTask;
    }

    private void SeleccionarDia(DateTime dia)
    {
        cita.Fecha = dia.Date;
        RecalcularHorasDisponibles();
    }

    private void PrevMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        GenerarCalendario(currentMonth);
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        GenerarCalendario(currentMonth);
    }

    // Semana empieza en LUNES
    private void GenerarCalendario(DateTime mes)
    {
        CalendarDays.Clear();
        var firstDay = new DateTime(mes.Year, mes.Month, 1);
        var daysInMonth = DateTime.DaysInMonth(mes.Year, mes.Month);

        int offset = ((int)firstDay.DayOfWeek + 6) % 7; // lunes=0 ... domingo=6
        for (int i = 0; i < offset; i++) CalendarDays.Add(null);
        for (int d = 1; d <= daysInMonth; d++) CalendarDays.Add(new DateTime(mes.Year, mes.Month, d));
    }

    private void RecalcularHorasDisponibles()
    {
        HorasDisponibles = new List<string>(TodasLasHoras);

        if (cita.EmpleadoID > 0 && CitasEmpleado.Count > 0)
        {
            var ocupadas = CitasEmpleado
                .Where(c => c.Fecha.Date == cita.Fecha.Date)
                .Select(c => c.Hora)
                .Where(h => !string.IsNullOrWhiteSpace(h))
                .ToHashSet(StringComparer.OrdinalIgnoreCase);

            HorasDisponibles.RemoveAll(h => ocupadas.Contains(h));
        }

        if (!HorasDisponibles.Contains(cita.Hora))
            cita.Hora = "";
    }

    private async Task ConfirmarCita()
    {
        await CitasController.InsertarCitaAsync(cita);

        if (cita.EmpleadoID > 0)
        {
            CitasEmpleado = await CitasController.GetCitasPorEmpleadoAsync(cita.EmpleadoID);
            RecalcularHorasDisponibles();
        }
    }
}
