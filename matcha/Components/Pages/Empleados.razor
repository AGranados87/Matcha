@page "/empleados"
@rendermode InteractiveServer
@inject IConfiguration Config
@inject IJSRuntime JS

@using Dapper
@using matcha.Components.Controllers
@using matcha.Modelo
@using Microsoft.Data.SqlClient

<PageTitle>Listado de Empleados</PageTitle>

<header class="d-flex align-items-center p-3 shadow-sm" id="main-header">
    <span class="fas fa-users fa-2x text-success me-3"></span>
    <h1 class="m-0">Listado de Empleados</h1>
</header>

<div class="container" style="padding-top:60px; margin-bottom:10px;">
    <div class="card shadow-sm mb-3">
        <div class="card-body d-flex flex-wrap align-items-center justify-content-between">

            <div class="me-2 d-flex align-items-center" style="max-width:500px; width:100%; gap:2rem;">
                <label class="form-label mb-0 fs-5 d-flex align-items-center" style="white-space: nowrap;">
                    <span class="fas fa-search me-2 text-success"></span>
                    Filtro de Búsqueda
                </label>

                <input class="form-control form-control-lg custom-input" placeholder="Buscar empleado..."
                       @bind="filtroBusqueda" @bind:event="oninput" />
            </div>

            <button class="btn btn-success btn-lg" @onclick="AbrirModalNuevoEmpleado">
                <i class="fas fa-plus me-1"></i> Nuevo Empleado
            </button>
        </div>
    </div>
</div>


@if (empleados == null)
{
    <div class="alert alert-info" style="margin-top:90px;">Cargando empleados...</div>
}
else if (!empleados.Any())
{
    <div class="alert alert-warning" style="margin-top:90px;">No hay empleados registrados.</div>
}
else
{
    <div id="page-content" style="padding-top:20px;">
        <div class="container">
            <div class="table-responsive shadow-sm rounded">
                <table class="table table-hover align-middle">
                    <thead class="table-success">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Usuario</th>
                            <th scope="col">Email</th>
                            <th scope="col">Rol</th>
                            <th scope="col" class="text-center">Activo</th>
                            <th scope="col" class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var e in EmpleadosFiltrados)
                        {
                            <tr>
                                <th scope="row">@e.EmpleadoID</th>

                                <!-- Usuario -->
                                <td>
                                    @if (empleadoEditando?.EmpleadoID == e.EmpleadoID)
                                    {
                                        <input class="form-control" @bind="empleadoEditando.UserName" />
                                    }
                                    else
                                    {
                                        @e.UserName
                                    }
                                </td>

                                <!-- Email -->
                                <td>
                                    @if (empleadoEditando?.EmpleadoID == e.EmpleadoID)
                                    {
                                        <input class="form-control" @bind="empleadoEditando.Email" />
                                    }
                                    else
                                    {
                                        @e.Email
                                    }
                                </td>

                                <!-- Rol -->
                                <td>
                                    @if (empleadoEditando?.EmpleadoID == e.EmpleadoID)
                                    {
                                        <select class="form-select" @bind="empleadoEditando.RolID">
                                            <option value="0">-- Seleccionar Rol --</option>
                                            @foreach (var rol in roles)
                                            {
                                                <option value="@rol.ID">@rol.Nombre</option>
                                            }
                                        </select>
                                    }
                                    else
                                    {
                                        @e.RolNombre
                                    }
                                </td>

                                <!-- Activo -->
                                <td class="text-center">
                                    @if (empleadoEditando?.EmpleadoID == e.EmpleadoID)
                                    {
                                        <input type="checkbox" @bind="empleadoEditando.Activo" />
                                    }
                                    else
                                    {
                                        <input type="checkbox" checked="@e.Activo" disabled />
                                    }
                                </td>

                                <!-- Acciones -->
                                <td class="text-center">
                                    @if (empleadoEditando?.EmpleadoID == e.EmpleadoID)
                                    {
                                        <button class="btn btn-sm btn-success me-1" @onclick="() => Guardar(e.EmpleadoID)">
                                            <span class="fas fa-check"></span>
                                        </button>
                                        <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicion">
                                            <span class="fas fa-times"></span>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-success me-1" @onclick="() => Editar(e)">
                                            <span class="fas fa-edit"></span>
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => Eliminar(e.EmpleadoID)">
                                            <span class="fas fa-trash"></span>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Paginación -->
            <nav aria-label="Paginación empleados">
                <ul class="pagination justify-content-center mt-3">
                    <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                        <button class="page-link rounded-pill border-0 bg-light text-dark shadow-sm mx-2"
                                style="min-width: 100px;" @onclick="PaginaAnterior">
                            <span class="me-1">&laquo;</span> Anterior
                        </button>
                    </li>
                    <li class="page-item disabled">
                        <span class="page-link rounded-pill border-0 text-white shadow-sm"
                              style="min-width: 60px; background-color: #28a745;">
                            @paginaActual / @TotalPaginas
                        </span>
                    </li>
                    <li class="page-item @(paginaActual == TotalPaginas ? "disabled" : "")">
                        <button class="page-link rounded-pill border-0 bg-light text-dark shadow-sm mx-2"
                                style="min-width: 100px;" @onclick="SiguientePagina">
                            Siguiente <span class="ms-1">&raquo;</span>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
}

<!-- Modal para Nuevo Empleado -->
@if (mostrarModal)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" id="modalNuevoEmpleado">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title"><i class="fas fa-user-plus me-2"></i> Nuevo Empleado</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CerrarModal"></button>
                </div>

                <EditForm Model="@nuevoEmpleado" OnValidSubmit="InsertarEmpleado">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Usuario *</label>
                            <InputText class="form-control" @bind-Value="nuevoEmpleado.UserName" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email *</label>
                            <InputText class="form-control" @bind-Value="nuevoEmpleado.Email" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Contraseña *</label>
                            <InputText class="form-control" type="password" @bind-Value="nuevoEmpleado.PasswordHash" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Rol *</label>
                            <select class="form-select" @bind="nuevoEmpleado.RolID">
                                <option value="0">-- Seleccionar Rol --</option>
                                @foreach (var rol in roles)
                                {
                                    <option value="@rol.ID">@rol.Nombre</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox class="form-check-input" @bind-Value="nuevoEmpleado.Activo" />
                            <label class="form-check-label">Activo</label>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModal">
                            <i class="fas fa-times me-1"></i> Cancelar
                        </button>
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-save me-1"></i> Guardar
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    #main-header {
        position: fixed;
        top: 0;
        left: 0;
        width: calc(100% - var(--sidebar-width, 250px));
        margin-left: var(--sidebar-width, 250px);
        z-index: 1020;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: margin-left 0.3s, width 0.3s;
    }

        #main-header h1 {
            font-size: 2rem;
            margin: 0;
        }

        #main-header .fa-users {
            font-size: 1.5rem;
        }

    .modal {
        z-index: 1060;
    }

    .toast {
        z-index: 1070;
    }
</style>

@code {
    private List<Empleado>? empleados;
    private Empleado? empleadoEditando;
    private Empleado nuevoEmpleado = new();
    private List<Rol> roles = new();
    private int paginaActual = 1;
    private int tamanioPagina = 10;
    private string filtroBusqueda = string.Empty;
    private bool mostrarModal = false;

    private EmpleadosController empleadosController;

    private IEnumerable<Empleado> EmpleadosFiltrados =>
        empleados?
            .Where(e => string.IsNullOrEmpty(filtroBusqueda)
                        || e.UserName.Contains(filtroBusqueda, StringComparison.OrdinalIgnoreCase)
                        || e.Email.Contains(filtroBusqueda, StringComparison.OrdinalIgnoreCase))
            .Skip((paginaActual - 1) * tamanioPagina)
            .Take(tamanioPagina)
        ?? Enumerable.Empty<Empleado>();

    private int TotalPaginas =>
        (int)Math.Ceiling((empleados?.Count(e => string.IsNullOrEmpty(filtroBusqueda)
                        || e.UserName.Contains(filtroBusqueda, StringComparison.OrdinalIgnoreCase)
                        || e.Email.Contains(filtroBusqueda, StringComparison.OrdinalIgnoreCase)) ?? 0) / (double)tamanioPagina);

    protected override async Task OnInitializedAsync()
    {
        empleadosController = new EmpleadosController(Config.GetConnectionString("SqlConnection"));
        await CargarRoles();
        await CargarEmpleados();
    }

    private async Task CargarEmpleados() => empleados = await empleadosController.GetEmpleadosAsync();

    private async Task CargarRoles() => roles = await empleadosController.GetRolesAsync();

    private void Editar(Empleado e) => empleadoEditando = new Empleado
    {
        EmpleadoID = e.EmpleadoID,
        UserName = e.UserName,
        Email = e.Email,
        Activo = e.Activo,
        RolID = e.RolID
    };

    private void CancelarEdicion() => empleadoEditando = null;

    private void SiguientePagina() { if (paginaActual < TotalPaginas) paginaActual++; }
    private void PaginaAnterior() { if (paginaActual > 1) paginaActual--; }

    private void AbrirModalNuevoEmpleado()
    {
        nuevoEmpleado = new Empleado { Activo = true };
        mostrarModal = true;
    }

    private void CerrarModal() => mostrarModal = false;

    private async Task InsertarEmpleado()
    {
        // Hash directo de la contraseña
        nuevoEmpleado.PasswordHash = HashPassword(nuevoEmpleado.PasswordHash);

        await empleadosController.InsertarEmpleadoAsync(nuevoEmpleado);
        await CargarEmpleados();
        CerrarModal();
    }

    private async Task Guardar(int id)
    {
        if (empleadoEditando == null) return;

        // Si quieres permitir cambiar la contraseña en edición
        if (!string.IsNullOrWhiteSpace(empleadoEditando.PasswordHash))
            empleadoEditando.PasswordHash = HashPassword(empleadoEditando.PasswordHash);

        empleadoEditando.EmpleadoID = id;
        await empleadosController.ActualizarEmpleadoAsync(empleadoEditando);
        await CargarEmpleados();
        empleadoEditando = null;
    }

    private async Task Eliminar(int id)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "¿Seguro que quieres eliminar este empleado?")) return;

        await empleadosController.EliminarEmpleadoAsync(id);
        await CargarEmpleados();
    }

    private string HashPassword(string password)
    {
        using var sha256 = System.Security.Cryptography.SHA256.Create();
        var bytes = System.Text.Encoding.UTF8.GetBytes(password);
        var hash = sha256.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }
}
