@page "/login"
@using matcha.Components.Controllers
@using matcha.Components.Layout
@using Microsoft.AspNetCore.Identity
@using matcha.Modelo
@layout LoginLayout

@inject NavigationManager Navigation
@inject IConfiguration Config

<div class="login-card d-flex mx-auto my-auto"
     style="width: 800px; height: 550px; border-radius: 12px; overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15); position: absolute;
            top: 50%; left: 50%; transform: translate(-50%, -50%);">

    <!-- Izquierda: Imagen + Texto (40%) -->
    <div class="login-left p-4" style="background-color: #fffdeb; width: 40%; display:flex; flex-direction:column; align-items:center; justify-content:center;">
        <img src="Images/matchaverde.png" alt="Logo" style="max-width: 250px; margin-bottom: 1.5rem;">
        <h3 style="color: #06561a; font-family: Caladea, sans-serif; font-weight: bold; font-size: 1.5rem;">Bienvenido a Matcha</h3>
        <p style="color: #5b795b; font-family: 'Aptos', sans-serif; font-size: 1.1rem;">Tu plataforma de gestión eficiente</p>
    </div>

    <!-- Derecha: Formulario (60%) -->
    <div class="login-right p-5"
         style="background-color: white; width: 60%; display:flex; flex-direction:column; justify-content:center;
            border-top-right-radius:12px;
            border-bottom-right-radius:12px;
            border-top-left-radius:0;
            border-bottom-left-radius:0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);">

        <h3 style="font-family: 'Aptos', sans-serif; color: #333; margin-bottom: 2rem; font-size: 1.8rem; text-align: center;
               text-shadow: 1px 1px 3px rgba(0,0,0,0.08);">
            Iniciar Sesión
        </h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm" class="w-100">
            @if (!string.IsNullOrEmpty(errorLogin))
            {
                <div class="alert alert-danger text-center">
                    @errorLogin
                </div>
            }

            <div class="mb-3" style="border-radius:8px; overflow:hidden; box-shadow: inset 0 2px 5px rgba(0,0,0,0.05); border: 1px solid #c4c4c4;">
                <InputText @bind-Value="loginModel.Email" placeholder="Email" class="form-control form-control-lg" />
            </div>

            <div class="mb-4" style="border-radius:8px; overflow:hidden; box-shadow: inset 0 2px 5px rgba(0,0,0,0.05); border: 1px solid #c4c4c4;">
                <InputText @bind-Value="loginModel.Password" placeholder="Contraseña" type="password" class="form-control form-control-lg" />
            </div>

            <button type="submit" class="btn w-100 py-2"
                    style="background: linear-gradient(90deg, #66bb6a, #43a047);
                           color: white; font-weight: 600; border-radius:8px;
                           box-shadow: 0 5px 15px rgba(0,0,0,0.2); transition: all 0.3s ease;">
                Entrar
            </button>
        </EditForm>
    </div>
</div>

<style>
    body {
        background-color: #d8ead8;
        height: 100vh;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .btn:hover {
        background: linear-gradient(90deg, #43a047, #388e3c);
        box-shadow: 0 7px 20px rgba(0,0,0,0.25);
        transform: translateY(-2px);
    }

    input:focus {
        outline: none;
        box-shadow: 0 0 5px rgba(102,187,106,0.5);
    }
</style>

@code {
    private LoginModel loginModel = new();
    private EmpleadosController empleadosController;
    private string errorLogin = "";

    protected override void OnInitialized()
    {
        empleadosController = new EmpleadosController(Config.GetConnectionString("SqlConnection"));
    }

    private async Task HandleLogin()
    {
        errorLogin = "";

        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            errorLogin = "Debes introducir email y contraseña.";
            return;
        }

        var empleado = await empleadosController.AutenticarAsync(loginModel.Email, loginModel.Password);

        if (empleado == null)
        {
            errorLogin = "Email o contraseña incorrectos, o cuenta inactiva.";
            return;
        }

        // Login exitoso → redirige al dashboard
        Navigation.NavigateTo("/dashboard");
    }

}
