@page "/"
@page "/login"

@using matcha.Components.Controllers
@using matcha.Components.Layout
@using Microsoft.AspNetCore.Identity
@using matcha.Modelo
@layout LoginLayout
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject IConfiguration Config

<div class="login-card d-flex mx-auto my-auto"
     style="width: 800px; height: 550px; border-radius: 12px; overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15); position: absolute;
            top: 50%; left: 50%; transform: translate(-50%, -50%);">

    <!-- Izquierda: Imagen + Texto (40%) -->
    <div class="login-left p-4" style="background-color: #fffdeb; width: 40%; display:flex; flex-direction:column; align-items:center; justify-content:center;">
        <img src="Images/matchaverde.png" alt="Logo" style="max-width: 250px; margin-bottom: 1.5rem;">
        <h3 style="color: #06561a; font-family: Caladea, sans-serif; font-weight: bold; font-size: 1.5rem;">Bienvenido a Matcha</h3>
        <p style="color: #5b795b; font-family: 'Aptos', sans-serif; font-size: 1.1rem;">Tu plataforma de gestión eficiente</p>
    </div>

    <!-- Derecha: Formulario (60%) -->
    <div class="login-right p-5"
         style="background-color: white; width: 60%; display:flex; flex-direction:column; justify-content:center;
            border-top-right-radius:12px;
            border-bottom-right-radius:12px;
            border-top-left-radius:0;
            border-bottom-left-radius:0;
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);">

        <h3 style="font-family: 'Aptos', sans-serif; color: #333; margin-bottom: 2rem; font-size: 1.8rem; text-align: center;
               text-shadow: 1px 1px 3px rgba(0,0,0,0.08);">
            Iniciar Sesión
        </h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm" class="w-100">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorLogin))
            {
                <div class="alert alert-danger text-center">
                    @errorLogin
                </div>
            }

            @if (isLoading)
            {
                <div class="alert alert-info text-center">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    Verificando credenciales...
                </div>
            }

            <div class="mb-3" style="border-radius:8px; overflow:hidden; box-shadow: inset 0 2px 5px rgba(0,0,0,0.05); border: 1px solid #c4c4c4;">
                <InputText @bind-Value="loginModel.Email" placeholder="Email" class="form-control form-control-lg"
                           disabled="@isLoading" @oninput="OnEmailInput" />
            </div>

            <div class="mb-4" style="border-radius:8px; overflow:hidden; box-shadow: inset 0 2px 5px rgba(0,0,0,0.05); border: 1px solid #c4c4c4;">
                <InputText @bind-Value="loginModel.Password" placeholder="Contraseña" type="password" class="form-control form-control-lg"
                           disabled="@isLoading" @oninput="OnPasswordInput" />
            </div>

            <button type="submit" class="btn w-100 py-2" disabled="@isLoading"
                    style="background: linear-gradient(90deg, #66bb6a, #43a047);
                           color: white; font-weight: 600; border-radius:8px;
                           box-shadow: 0 5px 15px rgba(0,0,0,0.2); transition: all 0.3s ease;">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    <text>Iniciando sesión...</text>
                }
                else
                {
                    <text>Entrar</text>
                }
            </button>
        </EditForm>
    </div>
</div>

<style>
    body {
        background-color: #d8ead8;
        height: 100vh;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .btn:hover:not(:disabled) {
        background: linear-gradient(90deg, #43a047, #388e3c);
        box-shadow: 0 7px 20px rgba(0,0,0,0.25);
        transform: translateY(-2px);
    }

    .btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    input:focus {
        outline: none;
        box-shadow: 0 0 5px rgba(102,187,106,0.5);
    }

    input:disabled {
        background-color: #f8f9fa;
        opacity: 0.7;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private EmpleadosController? empleadosController;
    private string errorLogin = "";
    private bool isLoading = false;
    private int intentosLogin = 0;
    private DateTime? ultimoIntentoFallido;
    private const int MaxIntentosLogin = 5;
    private const int TiempoBloqueoMinutos = 15;

    protected override void OnInitialized()
    {
        var connectionString = Config.GetConnectionString("SqlConnection");
        if (string.IsNullOrEmpty(connectionString))
        {
            errorLogin = "Error de configuración del sistema. Contacte al administrador.";
            return;
        }

        empleadosController = new EmpleadosController(connectionString);
    }

    private void OnEmailInput(ChangeEventArgs e)
    {
        loginModel.Email = e.Value?.ToString()?.Trim() ?? "";
        LimpiarError();
    }

    private void OnPasswordInput(ChangeEventArgs e)
    {
        loginModel.Password = e.Value?.ToString() ?? "";
        LimpiarError();
    }

    private void LimpiarError()
    {
        if (!string.IsNullOrEmpty(errorLogin))
        {
            errorLogin = "";
            StateHasChanged();
        }
    }

    private bool EstaBloquedoPorIntentos()
    {
        if (intentosLogin < MaxIntentosLogin) return false;
        if (ultimoIntentoFallido == null) return false;

        var tiempoTranscurrido = DateTime.Now - ultimoIntentoFallido.Value;
        if (tiempoTranscurrido.TotalMinutes >= TiempoBloqueoMinutos)
        {
            // Resetear contador después del tiempo de bloqueo
            intentosLogin = 0;
            ultimoIntentoFallido = null;
            return false;
        }

        return true;
    }

    private async Task HandleLogin()
    {
        errorLogin = "";

        try
        {
            // Verificar bloqueo por intentos fallidos
            if (EstaBloquedoPorIntentos())
            {
                var tiempoRestante = TiempoBloqueoMinutos - (DateTime.Now - ultimoIntentoFallido!.Value).TotalMinutes;
                errorLogin = $"Demasiados intentos fallidos. Intente nuevamente en {Math.Ceiling(tiempoRestante)} minutos.";
                return;
            }

            // Validación de campos
            if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
            {
                errorLogin = "Debes introducir email y contraseña.";
                return;
            }

            // Validación básica de email
            if (!IsValidEmail(loginModel.Email))
            {
                errorLogin = "Por favor, introduce un email válido.";
                return;
            }

            if (empleadosController == null)
            {
                errorLogin = "Error del sistema. Contacte al administrador.";
                return;
            }

            isLoading = true;
            StateHasChanged();

            await Task.Delay(500);

            var empleado = await empleadosController.AutenticarAsync(loginModel.Email, loginModel.Password);

            if (empleado == null)
            {
                // Incrementar contador de intentos fallidos
                intentosLogin++;
                ultimoIntentoFallido = DateTime.Now;

                if (intentosLogin >= MaxIntentosLogin)
                {
                    errorLogin = $"Demasiados intentos fallidos. Su cuenta ha sido bloqueada por {TiempoBloqueoMinutos} minutos.";
                }
                else
                {
                    var intentosRestantes = MaxIntentosLogin - intentosLogin;
                    errorLogin = $"Email o contraseña incorrectos. Intentos restantes: {intentosRestantes}";
                }
                return;
            }

            // Login exitoso - resetear intentos
            intentosLogin = 0;
            ultimoIntentoFallido = null;

            // Redirigir al dashboard
            Navigation.NavigateTo("/dashboard", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorLogin = "Error del sistema durante el inicio de sesión. Intente nuevamente.";

            Console.WriteLine($"Error en HandleLogin: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private static bool IsValidEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email)) return false;

        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }
}