@page "/usuarios"
@rendermode InteractiveServer
@inject IConfiguration Config

@using Dapper
@using matcha.Modelo
@using Microsoft.Data.SqlClient;

<PageTitle>Listado de Usuarios</PageTitle>

<header class="d-flex align-items-center p-3 shadow-sm" id="main-header">
    <span class="fas fa-users fa-2x text-success me-3"></span>
    <h1 class="m-0">Clientes</h1>
</header>

@if (usuarios == null)
{
    <div class="alert alert-info" style="margin-top:90px;">Cargando usuarios...</div>
}
else if (!usuarios.Any())
{
    <div class="alert alert-warning" style="margin-top:90px;">No hay usuarios registrados.</div>
}
else
{
    <div id="page-content" style="padding-top:90px;">
        <div class="container">
            <div class="table-responsive shadow-sm rounded">
                <table class="table table-hover align-middle">
                    <thead class="table-success">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Nombre</th>
                            <th scope="col">Email</th>
                            <th scope="col" class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var u in UsuariosPagina)
                        {
                            <tr>
                                <th scope="row">@u.Id</th>
                                <td>@u.Nombre</td>
                                <td>@u.Email</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-outline-success me-1">
                                        <span class="fas fa-edit"></span>
                                    </button>
                                    <button class="btn btn-sm btn-danger">
                                        <span class="fas fa-trash"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Paginación -->
            <nav aria-label="Paginación usuarios">
                <ul class="pagination justify-content-center mt-3">
                    <li class="page-item @(paginaActual == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PaginaAnterior">Anterior</button>
                    </li>
                    <li class="page-item disabled">
                        <span class="page-link">@paginaActual de @TotalPaginas</span>
                    </li>
                    <li class="page-item @(paginaActual == TotalPaginas ? "disabled" : "")">
                        <button class="page-link" @onclick="SiguientePagina">Siguiente</button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
}
    <style>
    #main-header {
        position: fixed; /* pegado arriba */
        top: 0;
        left: 0; /* lo ajustaremos con margin-left */
        width: calc(100% - var(--sidebar-width, 250px)); /* ancho dinámico según sidebar */
        margin-left: var(--sidebar-width, 250px);
        z-index: 1020;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: margin-left 0.3s, width 0.3s;}

        #main-header h1 {
            font-size: 2rem; /* más pequeño que el h1 normal */
            margin: 0;
        }

        #main-header .fa-users {
            font-size: 1.5rem; /* en lugar de fa-2x  */
        }
    </style>


@code {
    private List<Usuario>? usuarios;
    private int paginaActual = 1;
    private int tamanioPagina = 15;

    private IEnumerable<Usuario> UsuariosPagina
        => usuarios?
            .Skip((paginaActual - 1) * tamanioPagina)
            .Take(tamanioPagina) ?? Enumerable.Empty<Usuario>();

    private int TotalPaginas => (int)Math.Ceiling((usuarios?.Count ?? 0) / (double)tamanioPagina);

    private void SiguientePagina()
    {
        if (paginaActual < TotalPaginas)
            paginaActual++;
    }

    private void PaginaAnterior()
    {
        if (paginaActual > 1)
            paginaActual--;
    }

    protected override void OnInitialized()
    {
        using var conn = new SqlConnection(Config.GetConnectionString("SqlConnection"));
        conn.Open();
        usuarios = conn.Query<Usuario>("SELECT Id, Nombre, Email FROM Usuarios").ToList();
    }
}
