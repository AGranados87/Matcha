@page "/dashboard"
@inject IConfiguration Config

@using Dapper
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Data.SqlClient
@using matcha.Modelo

@inject AuthenticationStateProvider AuthenticationStateProvider

 
<PageTitle>Dashboard Psicólogos</PageTitle>

<div class="dashboard-container">

    <!-- Header -->
    <header class="d-flex align-items-center p-3 shadow-sm" id="main-header">
        <span class="fas fa-tachometer-alt fa-2x text-success me-3"></span>
        <h1 class="m-0">@saludo, @(userName ?? "Álvaro")</h1>
    </header>

    <main class="p-4">
        <!-- Tarjetas resumen -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #4ade80, #16a34a);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-user-injured fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Pacientes activos</h6>
                            <h3 class="mb-0">@PacientesActivos</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #60a5fa, #2563eb);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-calendar-day fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Citas hoy</h6>
                            <h3 class="mb-0">5</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #facc15, #d97706);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-user-md fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Psicólogos disponibles</h6>
                            <h3 class="mb-0">3</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #f87171, #b91c1c);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-exclamation-triangle fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Citas pendientes</h6>
                            <h3 class="mb-0">2</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabla minimalista -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white border-bottom">
                <h5 class="mb-0"><span class="fas fa-calendar-alt me-2"></span>Próximas citas</h5>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0 table-dashboard">
                    <thead>
                        <tr>
                            <th>Paciente</th>
                            <th>Psicólogo</th>
                            <th>Fecha / Hora</th>
                            <th>Tipo</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Juan Pérez</td>
                            <td>Dra. López</td>
                            <td>22/08/2025 10:00</td>
                            <td>Individual</td>
                        </tr>
                        <tr>
                            <td>María Sánchez</td>
                            <td>Dr. Ruiz</td>
                            <td>22/08/2025 11:00</td>
                            <td>Grupo</td>
                        </tr>
                        <tr>
                            <td>Carlos Fernández</td>
                            <td>Dra. López</td>
                            <td>22/08/2025 11:30</td>
                            <td>Individual</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Calendario estilo Google Calendar -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white border-bottom d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <span class="fas fa-calendar me-2"></span>
                    Calendario - @Capitalize(currentMonth.ToString("MMMM yyyy", new System.Globalization.CultureInfo("es-ES")))
                </h5>
                <div>
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="PreviousMonth">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="NextMonth">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="calendar-container">
                    <div class="calendar-header">
                        <div>Lun</div>
                        <div>Mar</div>
                        <div>Mié</div>
                        <div>Jue</div>
                        <div>Vie</div>
                        <div>Sáb</div>
                        <div>Dom</div>
                    </div>

                    <div class="calendar-grid">
                        @foreach (var day in CalendarDays)
                        {
                            <div class="calendar-day @(day.HasValue ? "has-date" : "empty-day") @(IsToday(day) ? "today" : "") @(IsWeekend(day) ? "weekend" : "")">
                                @if (day.HasValue)
                                {
                                    <span class="date">@day.Value.Day</span>
                                    @* Aquí puedes agregar eventos/citas en el futuro *@
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>


<style>
    /* Contenedor general */
    .dashboard-container {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f3f4f6;
        min-height: 100vh;
    }

    /* Header fijo */
    .dashboard-header {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 60px;
        background-color: #ffffff;
        z-index: 1020;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

        .dashboard-header h1 {
            font-size: 1.75rem;
            font-weight: 600;
        }

    /* Tarjetas dashboard */
    .card-dashboard {
        border-radius: 12px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .card-dashboard:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }

        .card-dashboard h3 {
            font-weight: 700;
        }

        .card-dashboard h6 {
            font-weight: 500;
            opacity: 0.85;
        }

    /* Tabla minimalista */
    .table-dashboard thead {
        background-color: #f9fafb;
        font-weight: 600;
    }

    .table-dashboard tbody tr:hover {
        background-color: #e5e7eb;
    }

    .table-dashboard td,
    .table-dashboard th {
        vertical-align: middle;
        padding: 0.75rem 1rem;
    }

    main {
        margin-top: 10px;
    }

    .calendar-container {
        font-family: 'Inter', 'Segoe UI', sans-serif;
    }

    /* Cabecera de días */
    .calendar-header {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        text-align: center;
        font-weight: 500;
        font-size: 0.85rem;
        margin-bottom: 10px;
        color: #6b7280;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    /* Grid */
    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 8px;
    }

    /* Día */
    .calendar-day {
        background: #ffffff;
        border: 1px solid #e5e7eb;
        border-radius: 12px;
        min-height: 120px;
        padding: 8px;
        display: flex;
        flex-direction: column;
        font-size: 0.85rem;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        cursor: pointer;
    }

        .calendar-day:hover {
            background: #f9fafb;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            transform: translateY(-2px);
        }

        .calendar-day.empty-day {
            background: #f8f9fa;
            cursor: default;
        }

        .calendar-day.today {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }

            .calendar-day.today:hover {
                background: linear-gradient(135deg, #2563eb, #1d4ed8);
                transform: translateY(-3px);
            }

        .calendar-day.weekend {
            background: #f1f5f9;
        }

        .calendar-day.other-month {
            background: #f8fafc;
            opacity: 0.4;
        }

            .calendar-day.other-month .date {
                color: #94a3b8;
                font-weight: 400;
            }

        .calendar-day .date {
            font-weight: 600;
            font-size: 0.9rem;
            color: #111827;
            margin-bottom: 4px;
        }

        .calendar-day.today .date {
            color: white;
        }

    /* Evento estilo "pill" */
    .event {
        margin-top: 4px;
        padding: 4px 8px;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
        color: white;
        cursor: pointer;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        box-shadow: 0 1px 2px rgba(0,0,0,0.15);
        transition: transform 0.15s ease-in-out;
    }

        .event:hover {
            transform: scale(1.05);
        }

    /* Paleta moderna (colores planos tipo Tailwind) */
    .bg-blue {
        background: #3b82f6;
    }

    .bg-green {
        background: #22c55e;
    }

    .bg-red {
        background: #ef4444;
    }

    .bg-purple {
        background: #a855f7;
    }

    .bg-orange {
        background: #f97316;
    }

    .bg-teal {
        background: #14b8a6;
    }

    .bg-pink {
        background: #ec4899;
    }

    .bg-indigo {
        background: #6366f1;
    }

    /* Responsivo */
    @@media (max-width: 768px) {
        .calendar-day {
            min-height: 80px;
            padding: 4px;
        }

        .calendar-header {
            font-size: 0.75rem;
        }
    }
</style>

@code {
    private string saludo = "";
    private List<Usuario> usuarios = new();
    private int PacientesActivos => usuarios?.Count ?? 0;
    // Corregido: inicializar como primer día del mes
    private DateTime currentMonth = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);
    private List<DateTime?> CalendarDays = new();
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var hora = DateTime.Now.Hour;
        saludo = hora >= 6 && hora < 12 ? "Buenos días" :
                 hora >= 12 && hora < 20 ? "Buenas tardes" : "Buenas noches";

        // Cargar usuarios
        await CargarUsuarios();

        // Construir calendario inicial
        BuildCalendar();

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
    }

    private async Task CargarUsuarios()
    {
        try
        {
            using var conn = new SqlConnection(Config.GetConnectionString("SqlConnection"));
            usuarios = (await conn.QueryAsync<Usuario>("SELECT PacienteID, Nombre FROM Usuarios")).ToList();
        }
        catch (Exception ex)
        {
            // Log del error si es necesario
            Console.WriteLine($"Error cargando usuarios: {ex.Message}");
            usuarios = new List<Usuario>();
        }
    }

    private void BuildCalendar()
    {
        var days = new List<DateTime?>();

        // Asegurar que trabajamos con el primer día del mes
        var firstDay = new DateTime(currentMonth.Year, currentMonth.Month, 1);
        int daysInMonth = DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);

        // Calcular offset para que la semana comience en lunes
        int firstDayOfWeek = (int)firstDay.DayOfWeek;
        int firstDayOffset = (firstDayOfWeek == 0 ? 6 : firstDayOfWeek - 1);

        // Espacios vacíos antes del primer día
        for (int i = 0; i < firstDayOffset; i++)
            days.Add(null);

        // Días del mes
        for (int i = 1; i <= daysInMonth; i++)
            days.Add(new DateTime(currentMonth.Year, currentMonth.Month, i));

        // Asignar la lista
        CalendarDays = days;
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        BuildCalendar();
        StateHasChanged();
    }

    private void PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        BuildCalendar();
        StateHasChanged();
    }

    private string Capitalize(string text)
    {
        if (string.IsNullOrEmpty(text)) return text;
        return char.ToUpper(text[0]) + text.Substring(1);
    }

    // Métodos helper para el calendario
    private bool IsToday(DateTime? date)
    {
        return date.HasValue && date.Value.Date == DateTime.Today;
    }

    private bool IsWeekend(DateTime? date)
    {
        if (!date.HasValue) return false;
        return date.Value.DayOfWeek == DayOfWeek.Saturday || date.Value.DayOfWeek == DayOfWeek.Sunday;
    }
}