@page "/dashboard"
@inject IConfiguration Config
@inject DialogService DialogService

@using Dapper
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Data.SqlClient
@using matcha.Modelo
@using Radzen
@using Radzen.Blazor

@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Dashboard Psicólogos</PageTitle>

<div class="dashboard-container">
    <!-- Header -->
    <header class="d-flex align-items-center p-3 shadow-sm" id="main-header">
        <span class="fas fa-tachometer-alt fa-2x text-success me-3"></span>
        <h1 class="m-0">@saludo, @(userName ?? "Álvaro")</h1>
    </header>

    <main class="p-4">
        <!-- Tarjetas resumen -->
        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #4ade80, #16a34a);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-user-injured fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Pacientes activos</h6>
                            <h3 class="mb-0">@PacientesActivos</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #60a5fa, #2563eb);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-calendar-day fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Citas hoy</h6>
                            <h3 class="mb-0">@citasHoy</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #facc15, #d97706);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-user-md fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Psicólogos disponibles</h6>
                            <h3 class="mb-0">3</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card card-dashboard shadow-sm text-white" style="background: linear-gradient(135deg, #f87171, #b91c1c);">
                    <div class="card-body d-flex align-items-center">
                        <span class="fas fa-exclamation-triangle fa-2x me-3"></span>
                        <div>
                            <h6 class="mb-1">Citas pendientes</h6>
                            <h3 class="mb-0">@citasPendientes</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tabla minimalista -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white border-bottom">
                <h5 class="mb-0"><span class="fas fa-calendar-alt me-2"></span>Próximas citas</h5>
            </div>
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0 table-dashboard">
                    <thead>
                        <tr>
                            <th>Paciente</th>
                            <th>Psicólogo</th>
                            <th>Fecha / Hora</th>
                            <th>Tipo</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cita in proximasCitas.Take(3))
                        {
                            <tr>
                                <td>@cita.PatientName</td>
                                <td>@cita.PsychologistName</td>
                                <td>@cita.Start.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>@cita.AppointmentType</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Calendario Radzen Scheduler CORREGIDO -->
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white border-bottom d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <span class="fas fa-calendar me-2"></span>
                    Calendario de Citas - @currentDate.ToString("MMMM yyyy", new System.Globalization.CultureInfo("es-ES"))
                </h5>
                <div class="d-flex align-items-center">
                    <!-- Selector de vista -->
                    <div class="btn-group me-3" role="group">
                        <button type="button" class="btn btn-sm @(currentView == "month" ? "btn-primary" : "btn-outline-secondary")"
                                @onclick='@(() => ChangeView("month"))'>
                                Mes
                        </button>
                        <button type="button" class="btn btn-sm @(currentView == "week" ? "btn-primary" : "btn-outline-secondary")"
                                @onclick='@(() => ChangeView("week"))'>
                            Semana
                        </button>
                        <button type="button" class="btn btn-sm @(currentView == "day" ? "btn-primary" : "btn-outline-secondary")"
                                @onclick='@(() => ChangeView("day"))'>
                            Día
                        </button>
                    </div>

                    <!-- Navegación -->
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="GoToPrev">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="GoToToday">
                        Hoy
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="GoToNext">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
            <div class="card-body p-0 calendar-container">
                @if (currentView == "month")
                {
                    <RadzenScheduler @ref="scheduler" Data="@appointments" TItem="AppointmentData"
                                     StartProperty="Start" EndProperty="End" TextProperty="Text"
                                     CurrentDate="@currentDate" Height="600" Style="width: 100%;">
                        <RadzenMonthView />
                    </RadzenScheduler>
                }
                else if (currentView == "week")
                {
                    <RadzenScheduler @ref="scheduler" Data="@appointments" TItem="AppointmentData"
                                     StartProperty="Start" EndProperty="End" TextProperty="Text"
                                     CurrentDate="@currentDate" Height="600" Style="width: 100%;">
                        <RadzenWeekView />
                    </RadzenScheduler>
                }
                else if (currentView == "day")
                {
                    <RadzenScheduler @ref="scheduler" Data="@appointments" TItem="AppointmentData"
                                     StartProperty="Start" EndProperty="End" TextProperty="Text"
                                     CurrentDate="@currentDate" Height="600" Style="width: 100%;">
                        <RadzenDayView />
                    </RadzenScheduler>
                }
            </div>
        </div>
    </main>
</div>

<style>
    /* Contenedor general */
    .dashboard-container {
        font-family: 'Segoe UI', sans-serif;
        background-color: #f3f4f6;
        min-height: 100vh;
    }

    /* Header */
    #main-header {
        background-color: #ffffff;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    /* Tarjetas dashboard */
    .card-dashboard {
        border-radius: 12px;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .card-dashboard:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.15);
        }

        .card-dashboard h3 {
            font-weight: 700;
        }

        .card-dashboard h6 {
            font-weight: 500;
            opacity: 0.85;
        }

    /* Tabla minimalista */
    .table-dashboard thead {
        background-color: #f9fafb;
        font-weight: 600;
    }

    .table-dashboard tbody tr:hover {
        background-color: #e5e7eb;
    }

    .table-dashboard td,
    .table-dashboard th {
        vertical-align: middle;
        padding: 0.75rem 1rem;
    }

    main {
        margin-top: 10px;
    }

    /* Contenedor del calendario - ESTILOS CRÍTICOS */
    .calendar-container {
        min-height: 700px;
        position: relative;
        z-index: 1;
    }

    /* Override de estilos de Radzen Scheduler */
    .rz-scheduler {
        border: none !important;
        min-height: 600px !important;
        font-size: 14px !important;
    }

    .rz-scheduler-month-view {
        min-height: 500px !important;
    }

        .rz-scheduler-month-view .rz-scheduler-date {
            min-height: 120px !important;
            height: 120px !important;
            border: 1px solid #e5e7eb !important;
            padding: 4px !important;
            vertical-align: top !important;
        }

        .rz-scheduler-month-view .rz-scheduler-date-content {
            min-height: 110px !important;
            height: 110px !important;
        }

    /* Citas del calendario - más grandes y visibles */
    .rz-scheduler-appointment {
        border-radius: 6px !important;
        padding: 8px 10px !important;
        margin: 3px 2px !important;
        font-size: 0.85rem !important;
        line-height: 1.3 !important;
        min-height: auto !important;
        border-left: 4px solid !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
        white-space: normal !important;
        overflow: hidden !important;
    }

    .rz-scheduler-appointment-text {
        font-weight: 600 !important;
        white-space: normal !important;
        line-height: 1.3 !important;
        font-size: 0.85rem !important;
    }

    /* Colores personalizados para tipos de citas */
    .appointment-individual {
        background: linear-gradient(135deg, #3b82f6, #1d4ed8) !important;
        border-left-color: #1e40af !important;
        color: white !important;
    }

    .appointment-group {
        background: linear-gradient(135deg, #10b981, #047857) !important;
        border-left-color: #065f46 !important;
        color: white !important;
    }

    .appointment-evaluation {
        background: linear-gradient(135deg, #f59e0b, #d97706) !important;
        border-left-color: #b45309 !important;
        color: white !important;
    }

    /* Header del scheduler */
    .rz-scheduler-header {
        background-color: #f8fafc !important;
        border-bottom: 1px solid #e2e8f0 !important;
        padding: 1rem !important;
        min-height: 60px !important;
    }

    .rz-scheduler-navigation {
        font-size: 1.1rem !important;
        font-weight: 600 !important;
    }

    /* Día actual destacado */
    .rz-scheduler-today {
        background-color: #dbeafe !important;
        font-weight: bold !important;
    }

        .rz-scheduler-today .rz-scheduler-date-number {
            color: #1d4ed8 !important;
            font-weight: bold !important;
        }

    /* Botones de navegación personalizados */
    .btn-group .btn {
        border-radius: 6px !important;
        margin: 0 2px !important;
    }

    /* Responsivo */
    @@media (max-width: 768px) {
        .calendar-container {
            min-height: 500px;
        }

        .rz-scheduler {
            min-height: 400px !important;
            font-size: 12px !important;
        }

        .rz-scheduler-month-view .rz-scheduler-date {
            min-height: 80px !important;
            height: 80px !important;
        }

        .rz-scheduler-appointment {
            font-size: 0.7rem !important;
            padding: 4px 6px !important;
        }

        .rz-scheduler-header {
            padding: 0.5rem !important;
            min-height: 50px !important;
        }

        .btn-group {
            margin-bottom: 10px;
        }

        .card-header .d-flex {
            flex-direction: column;
            align-items: flex-start !important;
        }

            .card-header .d-flex > div {
                margin-top: 10px;
            }
    }

    /* Asegurar que el calendario tenga suficiente espacio */
    .card-body.p-0 {
        overflow: visible !important;
    }

    /* Espaciado entre secciones */
    .card.shadow-sm.mb-4 {
        margin-bottom: 2rem !important;
    }
</style>

@code {
    private string saludo = "";
    private List<Usuario> usuarios = new();
    private int PacientesActivos => usuarios?.Count ?? 0;
    private string? userName;

    // Variables para el Radzen Scheduler
    private RadzenScheduler<AppointmentData> scheduler;
    private List<AppointmentData> appointments = new();
    private List<AppointmentData> proximasCitas = new();
    private int citasHoy = 0;
    private int citasPendientes = 0;
    private DateTime currentDate = DateTime.Today;
    private string currentView = "month"; // "month", "week", "day"

    // Clase para las citas
    public class AppointmentData
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Text { get; set; } = string.Empty;
        public string PatientName { get; set; } = string.Empty;
        public string PsychologistName { get; set; } = string.Empty;
        public string AppointmentType { get; set; } = "Individual";
        public string Status { get; set; } = "Confirmed";
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var hora = DateTime.Now.Hour;
        saludo = hora >= 6 && hora < 12 ? "Buenos días" :
                 hora >= 12 && hora < 20 ? "Buenas tardes" : "Buenas noches";

        // Cargar usuarios
        await CargarUsuarios();

        // Cargar citas
        await LoadAppointments();

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
    }

    private async Task CargarUsuarios()
    {
        try
        {
            using var conn = new SqlConnection(Config.GetConnectionString("SqlConnection"));
            usuarios = (await conn.QueryAsync<Usuario>("SELECT PacienteID, Nombre FROM Usuarios")).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando usuarios: {ex.Message}");
            usuarios = new List<Usuario>();
        }
    }

    private async Task LoadAppointments()
    {
        try
        {
            appointments = new List<AppointmentData>
            {
                new AppointmentData
                {
                    Start = DateTime.Today.AddHours(10),
                    End = DateTime.Today.AddHours(11),
                    Text = "Consulta Individual",
                    PatientName = "Juan Pérez",
                    PsychologistName = "Dra. López",
                    AppointmentType = "Individual"
                },
                new AppointmentData
                {
                    Start = DateTime.Today.AddHours(11),
                    End = DateTime.Today.AddHours(12),
                    Text = "Terapia de Grupo",
                    PatientName = "María Sánchez",
                    PsychologistName = "Dr. Ruiz",
                    AppointmentType = "Grupo"
                },
                new AppointmentData
                {
                    Start = DateTime.Today.AddHours(15),
                    End = DateTime.Today.AddHours(16),
                    Text = "Sesión Evaluación",
                    PatientName = "Carlos Fernández",
                    PsychologistName = "Dra. López",
                    AppointmentType = "Evaluación"
                },
                new AppointmentData
                {
                    Start = DateTime.Today.AddDays(1).AddHours(9),
                    End = DateTime.Today.AddDays(1).AddHours(10),
                    Text = "Seguimiento",
                    PatientName = "Ana García",
                    PsychologistName = "Dr. Ruiz",
                    AppointmentType = "Individual"
                },
                new AppointmentData
                {
                    Start = DateTime.Today.AddDays(2).AddHours(14),
                    End = DateTime.Today.AddDays(2).AddHours(15),
                    Text = "Consulta Urgente",
                    PatientName = "Luis Martínez",
                    PsychologistName = "Dra. López",
                    AppointmentType = "Individual",
                    Status = "Pending"
                }
            };

            // Calcular estadísticas
            citasHoy = appointments.Count(a => a.Start.Date == DateTime.Today);
            citasPendientes = appointments.Count(a => a.Status == "Pending");
            proximasCitas = appointments.Where(a => a.Start >= DateTime.Today)
                                       .OrderBy(a => a.Start)
                                       .ToList();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando citas: {ex.Message}");
            appointments = new List<AppointmentData>();
            proximasCitas = new List<AppointmentData>();
        }
    }

    // Cambiar vista del calendario
    private void ChangeView(string view)
    {
        currentView = view;
        StateHasChanged();
    }

    // Métodos de navegación del calendario
    private void GoToPrev()
    {
        currentDate = currentView switch
        {
            "month" => currentDate.AddMonths(-1),
            "week" => currentDate.AddDays(-7),
            "day" => currentDate.AddDays(-1),
            _ => currentDate.AddDays(-1)
        };
        StateHasChanged();
    }

    private void GoToToday()
    {
        currentDate = DateTime.Today;
        StateHasChanged();
    }

    private void GoToNext()
    {
        currentDate = currentView switch
        {
            "month" => currentDate.AddMonths(1),
            "week" => currentDate.AddDays(7),
            "day" => currentDate.AddDays(1),
            _ => currentDate.AddDays(1)
        };
        StateHasChanged();
    }
}